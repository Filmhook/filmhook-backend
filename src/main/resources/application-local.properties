# Application name
spring.application.name = Film_hook

# Server 
server.port = 8080

# Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
# Localhost
spring.datasource.url = jdbc:mysql://localhost:3306/filmhook
#spring.datasource.url = jdbc:mysql://host.docker.internal:3306/filmhook
spring.datasource.username = root
spring.datasource.password = Admin@123
spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver

# Hibernate Properties
spring.jpa.hibernate.ddl-auto = update
spring.jpa.properties.hibernate.jdbc.time_zone = UTC
spring.jpa.properties.hibernate.format_sql = true
spring.jpa.show-sql = false

# Mail configuration
spring.mail.host = smtp.gmail.com
spring.mail.port = 587
spring.mail.username = yaswanthshankar2705@gmail.com
spring.mail.password = wnzkpdaaocypfmuw
spring.mail.properties.mail.smtp.auth = true
spring.mail.properties.mail.smtp.starttls.enable = true

spring.mvc.pathmatch.matching-strategy = ANT_PATH_MATCHER

# App specific configurations
annular.app.url = test.filmHook.com
annular.app.jwtSecret = annularSecretKey
annular.app.jwtExpirationMs = 1200000

# OTP Config
annular.app.accountSid = AC22b222ab67f887302edaef44c80789c3
annular.app.authToken = 73bdc2fb3127442db2619e832aebf755

# AWS-S3 Configurations
# Local
s3.region.name = us-east-1
s3.bucket.name = filmhook-dev

# Scheduling Config
jobs.enabled = true
# second (0-59) ? minute (0 - 59) ? hour (0 - 23) ? day of the month (1 - 31) ? month (1 - 12) (or JAN-DEC) ? day of the week (0 - 7) ? (or MON-SUN -- 0 or 7 is Sunday) ? * * * * * *
jobs.cron.expression = 0 0 * * * *
jobs.cron.timeZone = Asia/Kolkata
spring.task.scheduling.pool.size = 5

# Kafka Properties
# Broker
spring.kafka.topic = sample-topic
spring.kafka.bootstrap-servers = kafka:9092
#enable.auto.commit = true

# Producer Properties
spring.kafka.producer.bootstrap-servers = kafka:9092
spring.kafka.producer.key-serializer = org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer = org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.properties.acks = all
spring.kafka.producer.properties.retries = 10
spring.kafka.producer.properties.retry.backoff.ms = 1000
spring.kafka.producer.properties.partitions = 3
spring.kafka.producer.properties.replication = 2
spring.kafka.producer.properties.retention = 7

# Consumer Properties
spring.kafka.consumer.bootstrap-servers = kafka:9092
spring.kafka.consumer.group-id = default-task-Group
spring.kafka.consumer.key-deserializer = org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer = org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages = '*'